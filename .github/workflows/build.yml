name: Build and Test Wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1) Build wheels for Linux, Windows, macOS (pure Python, 3.9â€“3.13)
  build_wheels:
    name: Build wheels (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        platform: [linux, windows, macos]
        exclude:
          - os: ubuntu-latest
            platform: windows
          - os: ubuntu-latest
            platform: macos
          - os: windows-latest
            platform: linux
          - os: windows-latest
            platform: macos
          - os: macos-latest
            platform: linux
          - os: macos-latest
            platform: windows
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: pip install --upgrade pip setuptools wheel build

      - name: Check project structure
        run: |
          ls -R
          test -f setup.py
          test -d fluxdb
          test -f fluxdb/__init__.py
        shell: bash

      - name: Check setup.py syntax
        run: python -m py_compile setup.py

      - name: Build wheel
        run: python -m build --wheel --outdir dist

      - name: List wheels
        run: ls -l dist/ || dir dist
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-wheels-py${{ matrix.python-version }}
          path: dist/*.whl

  # 2) Test: Check installation and basic functionality across Python versions
  test_wheels:
    name: Test wheels (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: [build_wheels]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: linux-wheels-py${{ matrix.python-version }}
          path: dist/

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install psutil

      - name: Install wheel
        run: pip install dist/*-py3-none-any.whl

      - name: Run basic test
        run: |
          python -c "
          from fluxdb import FluxDB
          import os
          db = FluxDB('testdb')
          db.create_collection('test')
          record_id = db.insert('test', {'name': 'test', 'value': 42})
          results = db.find('test', {'name': 'test'})
          assert len(results) == 1, 'Expected 1 record'
          assert results[0]['name'] == 'test', 'Incorrect name'
          assert results[0]['value'] == '42', 'Incorrect value'
          assert results[0]['_id'] == record_id, 'Incorrect record ID'
          db.update('test', record_id, {'value': 100})
          updated = db.find('test', {'_id': record_id})
          assert updated[0]['value'] == '100', 'Update failed'
          db.delete('test', record_id)
          assert len(db.find('test')) == 0, 'Delete failed'
          os.makedirs('export_test', exist_ok=True)
          db.export_collection('test', 'export_test/test.fdb')
          db.import_collection('new_test', 'export_test/test.fdb')
          assert db.count('new_test') == 0, 'Import failed'
          print('All tests passed!')
          "
